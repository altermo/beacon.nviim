if not vim then
    error('Requires running with `nvim`')
end

---@param config_spec beacon.spec
---@param name string
---@return string[]
local function config_spec_to_meta(config_spec, name)
    local spec = require 'beacon.utils.spec'
    local out = { ('---@class beacon.conf.%s: beacon.config'):format(name) }
    local iner_specs = {}

    for k, v in vim.spairs(config_spec) do
        if spec.spec_special_keys[k] then
        elseif v._t then
            local iner_spec_name = name .. '.' .. k
            iner_specs[iner_spec_name] = v
            table.insert(out, ('---@field %s beacon.conf.%s %s'):format(k, iner_spec_name, v[2]))
        else
            table.insert(out, ('---@field %s %s%s'):format(k, type(v[1]), v[2] ~= '' and ' ' .. v[2] or ''))
        end
    end

    for iner_spec_name, iner_spec in vim.spairs(iner_specs) do
        table.insert(out, '')
        vim.list_extend(out, config_spec_to_meta(iner_spec, iner_spec_name))
    end

    return out
end

---@param file string
local function generate_meta_file(file)
    local plugin = assert(loadfile(file))()
    if not plugin.config_spec then return end

    local config_spec = assert(plugin.config_spec)
    local docs_spec = assert(plugin.docs_spec)
    local name = 'beacon'
    local meta_file = 'lua/beacon/_meta/' .. name .. '.lua'
    local meta = {}

    table.insert(meta, '---@meta ' .. name)
    table.insert(meta, '-- This file has been generated by utils/spec.lua')
    table.insert(meta, '')

    local docs = vim.split(docs_spec, '\n', { trimempty = true })
    for k, v in ipairs(docs) do
        docs[k] = #v > 0 and '--- ' .. v or '---'
    end
    vim.list_extend(meta, docs)
    table.insert(meta, '')

    vim.list_extend(meta, config_spec_to_meta(config_spec, name))

    vim.fn.writefile(meta, meta_file)
end

local function main()
    vim.opt.runtimepath:append(vim.fn.getcwd())

    vim.fn.mkdir('lua/beacon/_meta', 'p')

    generate_meta_file('lua/beacon/init.lua')
end

main()
